(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/app.js":[function(require,module,exports){
(function (global){
"use strict";

var MenuItemComponent = require("./components/menu-item.js").MenuItemComponent;
var Circle = require("./actors/circle.js").Circle;
var Line = require("./actors/line.js").Line;
var App = (function () {
  var App = function App() {
    var container = document.getElementById("canvas");
    var styles = window.getComputedStyle(container);
    this.renderer = new PIXI.autoDetectRenderer(container.clientWidth - parseInt(styles.paddingLeft) - parseInt(styles.paddingRight), 400, { antialias: true });
    container.appendChild(this.renderer.view);

    this.setupEditor();
    this.setupUI();

    this.stage = new PIXI.Stage(13421772);
    this.lastSimTime = 0;
    this.setSimulationFromFile("example.js");
    this.simulate(0);

    console.log(new Circle());
  };

  App.prototype.addComponent = function (name, component) {
    Vue.component(name, component.toComponent());
  };

  App.prototype.setupUI = function () {
    var _this = this;
    Vue.config.debug = true;
    this.addComponent("menu-item", new MenuItemComponent());

    Vue.filter("floatformat", function (value) {
      return value.toFixed(2);
    });

    this.ui = new Vue({
      el: "#app",
      data: {
        menu: [{
          name: "Mathematics",
          children: [{ name: "Eksempel 1", file: "example.js" }, { name: "Eksempel 2", file: "example2.js" }, { name: "Kule", file: "kule.js" }]
        }, {
          name: "Physics",
          children: []
        }],
        isRunning: false,
        time: 0,
        simulation: ""
      },
      methods: {
        startStop: function () {
          this.isRunning = !this.isRunning;

          // Round to nearest hundredth:
          this.time = parseFloat(this.time.toFixed(2));
        },

        reset: function () {
          this.time = 0;
        },

        stepBackward: function () {
          this.time -= 0.01;
        },

        stepForward: function () {
          this.time += 0.01;
        },

        chooseSimulation: function (file) {
          _this.setSimulationFromFile(file);
        },

        updateSimulation: function (_) {
          _this.setSimulationFromEditor();
        }

      },
      watch: {
        simulation: function (_) {
          console.log("Sim changed");
        }
      }
    });
  };

  App.prototype.setSimulationFromFile = function (file) {
    var _this2 = this;
    $.ajax({
      url: "./src/simulations/" + file,
      type: "GET",
      complete: function (data) {
        _this2.editor.getDoc().setValue(data.responseText);
        _this2.setSimulationFromCode(data.responseText);
        _this2.ui.simulation = file;
      }
    });
  };

  App.prototype.setSimulationFromCode = function (code) {
    console.log(code);
    eval(code);
    console.log("coooode", simulation);

    this.sim = simulation;
    this.stage = new PIXI.Stage(16777215 * Math.random());
    this.sim.actors = {
      Circle: Circle,
      Line: Line
    };
    this.sim.init(this.stage);
  };

  App.prototype.setSimulationFromEditor = function () {
    var code = this.editor.getDoc().getValue();
    console.log(code);
    this.setSimulationFromCode(code);
    this.ui.simulation = Math.random();
  };

  App.prototype.simulate = function (t) {
    requestAnimFrame(this.simulate.bind(this));
    if (!this.ui.simulation) {
      console.log("No simulation set!");
      return;
    }

    var dt = (t - this.lastSimTime) / 1000;
    if (this.ui.isRunning) this.ui.time += dt;

    this.update();
    this.lastSimTime = t;
  };

  App.prototype.update = function () {
    this.sim.update(this.ui.time);
    this.renderer.render(this.stage);
  };

  App.prototype.setupEditor = function () {
    this.editor = CodeMirror.fromTextArea(document.getElementById("code"), {
      lineNumbers: true,
      styleActiveLine: true,
      matchBrackets: true
    });
  };

  return App;
})();

global.app = function () {
  new App();
};





}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./actors/circle.js":"/home/olav/Kilder/SimRealO/src/actors/circle.js","./actors/line.js":"/home/olav/Kilder/SimRealO/src/actors/line.js","./components/menu-item.js":"/home/olav/Kilder/SimRealO/src/components/menu-item.js"}],"/home/olav/Kilder/SimRealO/src/actors/circle.js":[function(require,module,exports){
"use strict";

var _extends = function (child, parent) {
  child.prototype = Object.create(parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  child.__proto__ = parent;
};

var Circle = (function (PIXI) {
  var Circle = function Circle(x, y, radius, line, color) {
    if (line === undefined) line = false;
    if (color === undefined) color = 0;
    PIXI.Graphics.call(this);

    this.beginFill(color, 1);
    this.lineStyle(2, 0, 0.4);
    this.drawCircle(0, 0, radius);
    this.endFill();

    if (line) {
      this.moveTo(0, 0);
      this.lineTo(radius, 0);
    }

    this.x = x;
    this.y = y;
  };

  _extends(Circle, PIXI.Graphics);

  return Circle;
})(PIXI);

exports.Circle = Circle;

},{}],"/home/olav/Kilder/SimRealO/src/actors/line.js":[function(require,module,exports){
"use strict";

var _extends = function (child, parent) {
  child.prototype = Object.create(parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  child.__proto__ = parent;
};

var Line = (function (PIXI) {
  var Line = function Line(x1, y1, x2, y2, color) {
    if (color === undefined) color = 0;
    PIXI.Graphics.call(this);

    this.lineStyle(2, color, 1);
    this.moveTo(x1, y1);
    this.lineTo(x2, y2);
  };

  _extends(Line, PIXI.Graphics);

  return Line;
})(PIXI);

exports.Line = Line;

},{}],"/home/olav/Kilder/SimRealO/src/components/component.js":[function(require,module,exports){
"use strict";

var Component = (function () {
  var Component = function Component() {
    this.twoWay = false;
  };

  Component.prototype.toComponent = function () {
    return {
      twoWay: this.twoWay,
      template: this.template(),
      data: this.data,
      computed: this.computed(),
      methods: this.methods()
    };
  };

  Component.prototype.template = function () {
    return "";
  };

  Component.prototype.data = function () {
    return {};
  };

  Component.prototype.computed = function () {
    return {};
  };

  Component.prototype.methods = function () {
    return {};
  };

  return Component;
})();

exports.Component = Component;

},{}],"/home/olav/Kilder/SimRealO/src/components/menu-item.js":[function(require,module,exports){
"use strict";

var _extends = function (child, parent) {
  child.prototype = Object.create(parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  child.__proto__ = parent;
};

var Component = require("./component.js").Component;
var MenuItemComponent = (function (Component) {
  var MenuItemComponent = function MenuItemComponent() {
    Component.call(this);
    this.twoWay = false;
  };

  _extends(MenuItemComponent, Component);

  MenuItemComponent.prototype.template = function () {
    return "\n            <li class=\"list-group-item\">\n                <span v-on=\"click: open\"><span class=\"label label-info pull-right\" v-if=\"isFolder\">{{isOpen ? '-' : '+'}}</span> {{ model.name }}</span>\n\n                <ul v-show=\"isOpen\" v-if=\"isFolder\">\n                    <div v-repeat=\"model: model.children\" v-component=\"menu-item\"></div>\n                </ul>\n            </li>\n        ";
  };

  MenuItemComponent.prototype.data = function () {
    return {
      isOpen: false
    };
  };

  MenuItemComponent.prototype.computed = function () {
    return {
      isFolder: function () {
        return this.model.children != undefined && this.model.children.length > 0;
      }
    };
  };

  MenuItemComponent.prototype.methods = function () {
    return {
      open: function () {
        if (this.isFolder) {
          this.isOpen = !this.isOpen;
        } else {
          this.$root.chooseSimulation(this.model.file);
        }
      }
    };
  };

  return MenuItemComponent;
})(Component);

exports.MenuItemComponent = MenuItemComponent;

},{"./component.js":"/home/olav/Kilder/SimRealO/src/components/component.js"}]},{},["./src/app.js"])
//# sourceMappingURL=data:application/json;base64,
