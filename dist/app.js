(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/app.js":[function(require,module,exports){
(function (global){
"use strict";

var MenuItemComponent = require("./components/menu-item.js").MenuItemComponent;
var Example = require("./simulations/example.js").Simulation;
var Example2 = require("./simulations/example2.js").Simulation;
var App = (function () {
  var App = function App() {
    var container = document.getElementById("canvas");
    var styles = window.getComputedStyle(container);
    this.renderer = new PIXI.WebGLRenderer(container.clientWidth - parseInt(styles.paddingLeft) - parseInt(styles.paddingRight), 400);
    container.appendChild(this.renderer.view);

    this.setupEditor();
    this.setupUI();

    this.ui.setSimulation(Example);
    this.lastSimTime = 0;
    this.simulate(0);
  };

  App.prototype.addComponent = function (name, component) {
    Vue.component(name, component.toComponent());
  };

  App.prototype.setupUI = function () {
    Vue.config.debug = true;
    this.addComponent("menu-item", new MenuItemComponent());

    Vue.filter("floatformat", function (value) {
      return value.toFixed(2);
    });

    var renderer = this.renderer;
    var editor = this.editor;
    this.ui = new Vue({
      el: "#app",
      data: {
        menu: [{
          name: "Mathematics",
          children: [{ name: "Eksempel 1", simulation: Example }, { name: "Eksempel 2", simulation: Example2 }]
        }, {
          name: "Physics",
          children: []
        }],
        isRunning: false,
        time: 0,
        simulation: null
      },
      methods: {
        startStop: function () {
          this.isRunning = !this.isRunning;

          // Round to nearest hundredth:
          this.time = parseFloat(this.time.toFixed(2));
        },

        reset: function () {
          this.time = 0;
        },

        stepBackward: function () {
          this.time -= 0.01;
        },

        stepForward: function () {
          this.time += 0.01;
        },

        setSimulation: function (simulation) {
          this.simulation = simulation;
          this.simulation.stage = new PIXI.Stage(16777215);
          this.simulation.init();
          console.log("SIm set", "/src/simulations/" + this.simulation.file, $.get, simulation);

          $.ajax({
            url: "/src/simulations/" + this.simulation.file,
            type: "GET",
            complete: function (data) {
              editor.getDoc().setValue(data.responseText);
              var code = data.responseText;
            }
          });
        }
      }
    });
  };

  App.prototype.simulate = function (t) {
    requestAnimFrame(this.simulate.bind(this));
    var dt = (t - this.lastSimTime) / 1000;
    if (this.ui.isRunning) this.ui.time += dt;

    this.update();
    this.lastSimTime = t;
  };

  App.prototype.update = function () {
    this.ui.simulation.update(this.ui.time);
    this.renderer.render(this.ui.simulation.stage);
    //console.log(this.ui.simulation)
  };

  App.prototype.setupEditor = function () {
    this.editor = CodeMirror.fromTextArea(document.getElementById("code"), {
      lineNumbers: true,
      styleActiveLine: true,
      matchBrackets: true
    });
  };

  return App;
})();

global.app = function () {
  new App();
};



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./components/menu-item.js":"/home/olav/Kilder/SimRealO/src/components/menu-item.js","./simulations/example.js":"/home/olav/Kilder/SimRealO/src/simulations/example.js","./simulations/example2.js":"/home/olav/Kilder/SimRealO/src/simulations/example2.js"}],"/home/olav/Kilder/SimRealO/src/components/component.js":[function(require,module,exports){
"use strict";

var Component = (function () {
  var Component = function Component() {
    this.twoWay = false;
  };

  Component.prototype.toComponent = function () {
    return {
      twoWay: this.twoWay,
      template: this.template(),
      data: this.data,
      computed: this.computed(),
      methods: this.methods()
    };
  };

  Component.prototype.template = function () {
    return "";
  };

  Component.prototype.data = function () {
    return {};
  };

  Component.prototype.computed = function () {
    return {};
  };

  Component.prototype.methods = function () {
    return {};
  };

  return Component;
})();

exports.Component = Component;

},{}],"/home/olav/Kilder/SimRealO/src/components/menu-item.js":[function(require,module,exports){
"use strict";

var _extends = function (child, parent) {
  child.prototype = Object.create(parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  child.__proto__ = parent;
};

var Component = require("./component.js").Component;
var MenuItemComponent = (function (Component) {
  var MenuItemComponent = function MenuItemComponent() {
    Component.call(this);
    this.twoWay = false;
  };

  _extends(MenuItemComponent, Component);

  MenuItemComponent.prototype.template = function () {
    return "\n            <li class=\"list-group-item\">\n                <span v-on=\"click: open\"><span class=\"label label-info pull-right\" v-if=\"isFolder\">{{isOpen ? '-' : '+'}}</span> {{ model.name }}</span>\n\n                <ul v-show=\"isOpen\" v-if=\"isFolder\">\n                    <div v-repeat=\"model: model.children\" v-component=\"menu-item\"></div>\n                </ul>\n            </li>\n        ";
  };

  MenuItemComponent.prototype.data = function () {
    return {
      isOpen: false
    };
  };

  MenuItemComponent.prototype.computed = function () {
    return {
      isFolder: function () {
        return this.model.children != undefined && this.model.children.length > 0;
      }
    };
  };

  MenuItemComponent.prototype.methods = function () {
    return {
      open: function () {
        if (this.isFolder) {
          this.isOpen = !this.isOpen;
        } else {
          this.$root.setSimulation(this.model.simulation);
        }
      }
    };
  };

  return MenuItemComponent;
})(Component);

exports.MenuItemComponent = MenuItemComponent;

},{"./component.js":"/home/olav/Kilder/SimRealO/src/components/component.js"}],"/home/olav/Kilder/SimRealO/src/simulations/example.js":[function(require,module,exports){
"use strict";

var Simulation = exports.Simulation = {
  file: "example.js",
  data: {},

  init: function () {
    var texture = PIXI.Texture.fromImage("./assets/img/bunny.png");
    // create a new Sprite using the texture
    this.data.bunny = new PIXI.Sprite(texture);

    // center the sprites anchor point
    this.data.bunny.anchor.x = 0.5;
    this.data.bunny.anchor.y = 0.5;

    // move the sprite t the center of the screen
    this.data.bunny.position.x = 200;
    this.data.bunny.position.y = 150;

    this.stage.addChild(this.data.bunny);
  },

  update: function (t) {
    this.data.bunny.rotation = t * 5;
  }
};

},{}],"/home/olav/Kilder/SimRealO/src/simulations/example2.js":[function(require,module,exports){
"use strict";

var Simulation = exports.Simulation = {
  file: "example2.js",
  data: {},

  init: function () {
    var texture = PIXI.Texture.fromImage("./assets/img/bunny.png");
    // create a new Sprite using the texture
    this.data.bunnies = [];

    for (var i = 0; i < 50; i++) {
      var bunny = new PIXI.Sprite(texture);
      bunny.anchor.x = 0.5;
      bunny.anchor.y = 0.5;
      bunny.position.x = i * 10;
      bunny.position.y = 150;

      this.data.bunnies.push(bunny);
      this.stage.addChild(bunny);
    }
  },

  update: function (t) {
    for (var i = 0; i < this.data.bunnies.length; i++) {
      this.data.bunnies[i].rotation = t * 5;
    }
  }
};

},{}]},{},["./src/app.js"])
//# sourceMappingURL=data:application/json;base64,
